Jupyter and Panda 

LOADING CSV files

# Add the Pandas dependency.
import pandas as pd

	declare two variables: 
	schools_complete.csv file 
	students_complete.csv file.
	(These files are located in the Resources folder.)

			# Files to load

			school_data_to_load = "Resources/schools_complete.csv"

			student_data_to_load = "Resources/students_complete.csv"
					
	*************************************************
	ALTERNATE WAY		Then, use the os.path.join() method to connect to the CSV files: 
	# Add the dependencies.
	import pandas as pd
	import os


	# Files to load
	school_data_to_load = os.path.join("Resources", "schools_complete.csv")
	student_data_to_load = os.path.join("Resources", "students_complete.csv")

	**************************************************
_______________________________________________________________

#Determine if there are any missing values int eh student data.
	
		student_data_df.isnull().sum()
		
		
				Student ID       39170
			student_name     39170
			gender           39170
			grade            39170
			school_name      39170
			reading_score    39170
			math_score       39170
			dtype: int64	
_______________________________________________________________
a Pandas DataFrame.
	school_data_df = pd.read_csv(school_data_to_load)
	school_data_df
_______________________________________________________________	
#Determine sum of not null counts of data.
	student_data_df.notnull().sum()
	
				Student ID       39170
			student_name     39170
			gender           39170
			grade            39170
			school_name      39170
			reading_score    39170
			math_score       39170
			dtype: int64
# Determine data types for the school DataFrame.
	school_data_df.dtypes

			School ID       int64
			school_name    object
			type           object
			size            int64
			budget          int64
			dtype: object
_______________________________________________________________________________________________________________________________________________________________________________
#Loading Students_complete list into Jupyter

Student_data_to_load= "Resources/students_complete.csv"

			student_data_df=pd.read_csv(student_data_to_load)
			student_data_df.head()

		Student ID	student_name	gender	grade	school_name	reading_score	math_score
0	0	Paul Bradley	M	9th	Huang High School	66	79
1	1	Victor Smith	M	12th	Huang High School	94	61
2	2	Kevin Rodriguez	M	12th	Huang High School	90	60
3	3	Dr. Richard Scott	M	12th	Huang High School	67	58
4	4	Bonnie Ray	F	9th	Huang High School

		********************************************************

		The tolist() Method
	To get all the students' names in a separate file, we'll use the Pandas tolist() method on a DataFrame with reference to the student_name column. Using the tolist() method on the student_name column will add all the names to a list.

			# Put the student names in a list.
			student_names = student_data_df["student_name"].tolist()
			student_names
			
					['Paul Bradley',
				 'Victor Smith',
				 'Kevin Rodriguez',
				 'Dr. Richard Scott',
				 'Bonnie Ray',
				 'Bryan Miranda',
				 ''Michael Moreno PhD',
		 
		********************************************************
		The split() Method
	In Python, the split() method will split a Python string object on the whitespace, or where there is no text. If we split each name, we can count the length of each name. A student with a first and last name only will return a length of 2, whereas a name with a prefix or suffix only will have a length of 3.
	
		# Split the student name and determine the length of the split name.
		
				for name in student_names:
				print(name.split(), len(name.split()))
    
	
	['Paul', 'Bradley'] 2
	['Victor', 'Smith'] 2
	['Kevin', 'Rodriguez'] 2
	['Dr.', 'Richard', 'Scott'] 3
	['Bonnie', 'Ray'] 2
	['Bryan', 'Miranda'] 2
	['Sheena', 'Carter'] 2
	['Nicole', 'Baker'] 2
	['Michael', 'Roth'] 2
	['Matthew', 'Greene'] 2
	['Andrew', 'Alexander'] 2
	['Daniel', 'Cooper'] 2
	['Brittney', 'Walker'] 2
	['Mr.', 'Dylan', 'Taylor', 'MD'] 4,
	['Madeline', 'Snyder', 'MD'] 3,
	['Joseph', 'Morales', 'III'] 3....
	
		********************************************************
		
	# Create a new list and use it for the for loop to iterate through the list.
	
	students_to_fix = []
														
	# Use an if statement to check the length of the name.
	# If the name is greater than or equal to "3", add the name to the list.
			for name in student_names:
			if len(name.split()) >= 3:
			students_to_fix.append(name)
	# Get the length of the students whose names are greater than or equal to "3".

			len(students_to_fix)
			
____________1531________________________________________________________	

	


